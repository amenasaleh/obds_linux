colnames(counts_table) == sample_info$sample_id
tibble(
counts_table = colnames(counts_table),
sample_info = sample_info$sample_id
)
colnames(counts_table) <- colnames(counts_table) %>%
str_replace(".bam","")
# option 1: get a vector of pairwise comparisons
colnames(counts_table) == sample_info$sample_id
# option 2: get a single overall answer whether the two whole vectors are identical
identical(
colnames(counts_table),
sample_info$sample_id
)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(
countData = counts_table,
colData = sample_info,
design = ~ cell_type
)
storage.mode(counts_table) <- "integer"
dds <- DESeqDataSetFromMatrix(
countData = counts_table,
colData = sample_info,
design = ~ cell_type
)
dds
class(dds)
is(dds, "SummarizedExperiment")
assayNames(dds)
assays(dds)
head(assay(dds, "counts"))
colData(dds)
rowData(dds)
metadata(dds)
head(counts(dds))
design(dds)
sizeFactors(dds)
dispersions(dds)
dds[1:5, 1:4]
dds_filtered <- dds[rowSums(counts(dds) > 0) >= 4, ]
dds_filtered
keep <- counts(dds) %>%
as.data.frame() %>%
rownames_to_column("gene_id") %>%
as_tibble() %>%
pivot_longer(-gene_id) %>%
left_join(
colData(dds) %>% as_tibble(),
by = c("name" = "sample_id")) %>%
group_by(gene_id, cell_type) %>%
summarise(all_samples = all(value > 0)) %>%
summarise(all_samples_any_celltype = any(all_samples)) %>%
filter(all_samples_any_celltype) %>%
pull(gene_id)
dds[keep, ]
dds_rlog <- rlog(dds_filtered, blind=TRUE)
dds_rlog
dds_vst <- vst(dds_filtered, blind=TRUE)
dds_vst
plotPCA(dds_rlog, intgroup='cell_type') +
coord_fixed(ratio = 5)
library(pheatmap)
dds_cor <- cor(assay(dds_rlog), method="spearman")
pheatmap(dds_cor)
library(RColorBrewer)
dds_dist <- dist(t(assay(dds_rlog)))
blue_colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(as.matrix(dds_dist),
color = blue_colors
)
# first pair of duplicates
identical(
counts(dds_filtered)[, "ERR1755082"],
counts(dds_filtered)[, "ERR1755088"]
)
# second pair of duplicates
identical(
counts(dds_filtered)[, "ERR1755083"],
counts(dds_filtered)[, "ERR1755089"]
)
keep <- setdiff(colnames(dds_filtered), c("ERR1755088", "ERR1755089"))
dds_filtered_unique <- dds_filtered[, keep]
dds_filtered_unique
design(dds_filtered_unique)
colData(dds_filtered_unique)
dds_filtered_unique <- DESeq(dds_filtered_unique)
dds_filtered_unique
dds_results <- results(dds_filtered_unique)
dds_results
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"))
summary(dds_results)
dds_filtered_unique <- DESeq(dds_filtered_unique)
dds_filtered_unique
dds_results <- results(dds_filtered_unique )
dds_results
results(dds_result, contrast = c("cell_type", "replicate")
results(dds_result, contrast = c("cell_type")
dds_filtered_unique <- DESeq(dds_filtered_unique)
dds_filtered_unique
colData(dds_filtered_unique)
dds_results <- results(dds_filtered_unique )
dds_results
results(dds_result, contrast = c("cell_type", "CD4", "CD8")
results(dds_result, contrast = c("cell_type CD4", "CD8")
results(dds_result, contrast = c(cell_type CD4, CD8)
results(dds_result, contrast = c("cell_type" ,"CD4", "CD8"))
results(dds_results, contrast = c("cell_type" ,"CD4", "CD8"))
results(dds_filtered_unique, contrast = c("cell_type" ,"CD4", "CD8"))
results(dds_filtered_unique, contrast = c("cell_type CD4", "CD8"))
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"))
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8", "replicate"))
View(dds_filtered_unique)
View(featurecounts_table)
View(featurecounts_table)
View(sample_info)
View(gene_info)
View(counts_table)
View(dds)
View(dds_cor)
View(dds_filtered)
View(dds_filtered_unique)
View(dds_filtered1)
View(dds_results)
View(dds_rlog)
View(dds_rlog_rlogT)
View(dds_vst)
View(featurecounts_table)
View(gene_info)
results(dds_filtered_unique, contrast = c("replicate","1","2","3"))
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"))
results(dds_filtered_unique, contrast = c("genotype", "Egr2_Egr3_KO", "Egr2_Kin" ))
results(dds_filtered_unique, contrast = c("replicate","1","2","3"))
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"))
summary(dds_results)
x <- dds_results %>% as.data.frame(dds_results)
x <- dds_results %>% as.data.frame(dds_results)
x <- dds_results %>% as.data.frame(dds_results)
x <- dds_results %>% as.data.frame(dds_results, row.names=NULL, check.rows=FALSE, check.names=TRUE)
x <- dds_results %>% as.data.frame(dds_results, row.names=NULL, check.rows=FALSE, check.names=TRUE)
summary(dds_results)
class(dds_results)
summary(dds_results)
colnames(dds_results)
summary(dds_results)
x <- dds_results %>% as.data.frame(dds_results, row.names=gene_id)
x <- dds_results %>% as.data.frame(dds_results, row.names="gene_id")
x <- dds_results %>% as.data.frame() %>% rownames_to_column="gene_id"#need to assign the column names #for the gene id rows because it has none
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")#need to assign the column names #for the gene id rows because it has none
x
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")#need to assign the column names #for the gene id rows because it has none
x
write_csv(x , "dds_results.csv"," ", col_names = !append)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")#need to assign the column names #for the gene id rows because it has none
x
write_csv(x , "dds_results.csv", col_names = !append)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")#need to assign the column names #for the gene id rows because it has none
write_csv(x , "dds_results.csv", col_names = !append)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")#need to assign the column names #for the gene id rows because it has none
write_csv(x , "dds_results.csv")
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")#need to assign the column names #for the gene id rows because it has none
write_csv(x , dds_results.csv, col_names=TRUE)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")#need to assign the column names #for the gene id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
x <- dds_results %>%
as.data.frame() %>%
rownames_to_column("gene_id")
write_csv(x, "dds_results.csv")
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")#need to assign the column names #for the gene id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
dds_check_results<- read_csv("dds_results.csv")
dds_check_results
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
x
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
dds_check_results<- read_csv("dds_results.csv")
dds_check_results
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
dds_check_results<- read_csv("dds_results.csv", row.names=1)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
dds_check_results<- read_csv("dds_results.csv")
dds_check_results
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
dds_check_results<- read_csv("dds_results.csv", comment = #)
dds_check_results
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
dds_check_results<- read_csv("dds_results.csv")
dds_check_results
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
keep <- counts(dds) %>%
as.data.frame() %>%
rownames_to_column("gene_id") %>%
as_tibble() %>%
pivot_longer(-gene_id) %>%
left_join(
colData(dds) %>% as_tibble(),
by = c("name" = "sample_id")) %>%
group_by(gene_id, cell_type) %>%
summarise(all_samples = all(value > 0)) %>%
summarise(all_samples_any_celltype = any(all_samples)) %>%
filter(all_samples_any_celltype) %>%
pull(gene_id)
dds[keep, ]
#OMG-I have forgotten everything, got from Kevin's key!
dds_rlog <- rlog( dds_filtered, blind=TRUE)
dds_rlog
class(dds_rlog)
#note- the bonus point making object keep had changed the dds which changed this value. #When I commented that command before this, the values returned to the expected 19053.
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"), alpha=0.05)
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"), alpha=0.05)
summary(dds_results)
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"), alpha=0.05)
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"), alpha=0.05)
tmp <- results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"), alpha=0.05)
#| label: setup
#| include: false
library(tidyverse)
library(DESeq2)
options(width = 120)
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"), alpha=0.05)
summary(dds_results)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
saveRDS(dds_results.csv, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
#saveRDS(dds_results.csv, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
#dds_results.csv
#plotMA()
#lfcShrink() use it for analysis, not included in excercise but important
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
saveRDS(dds_results.csv, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
saveRDS(dds_results.csv, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
saveRDS(dds_results, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
# dds_results<- readRDS("dds_results.csv)
#plotMA()
#lfcShrink() use it for analysis, not included in excercise but important
#| label: setup
#| include: false
library(tidyverse)
library(DESeq2)
options(width = 120)
#MY NOTE-READ TSV AND ASSIGN TO MATRIX HERE!
library(tidyverse)
featurecounts_table <- read_tsv("/project/shared/r/1_r_data_science/9-de/allsamples_counts.tsv.gz", col_names = TRUE, comment="#")
glimpse(featurecounts_table )
gene_info <- featurecounts_table %>%
column_to_rownames("Geneid" )%>%
select("Chr", "Start", "End","Strand","Length" )
glimpse(gene_info )
#so this is the gene info we generated-get all the relevant gene info into this dataframe
class(gene_info)
counts_table <- featurecounts_table %>%
column_to_rownames("Geneid") %>%
select( ends_with(".bam") )
head( counts_table)
#like yesterdays--read and assign to matrix
#assay_counts <- read.csv("data/summarized_experiment/counts.csv", row.names = 1)
#assay_counts <- as.matrix(assay_counts)
#NOTE-This needs to be a matrix in this step..countData---so converted it later as as.matrix, #otherwise =storage.mode was list instead of double which means it is double the data as #numbers-integers
#you need to have the row names constant so keep it the same as in the gene info table above
#in select, name is part of column, put in quotes
#you can use exclude-inverse selection
dim(counts_table)
counts_table<- as.matrix(counts_table)# THIS WAS TO BE DONE EARLIER WHILE READING TSV
#counts_table
storage.mode(counts_table)
#tells what is stored inside it, it affects the memory of the counts table
sample_info <- read_tsv("/project/shared/r/1_r_data_science/9-de/PRJEB18572_sample_info.tsv", col_names = TRUE )
sample_info
typeof(sample_info$cell_type)#not class-shows it as factor
# str(sample_info)
str(sample_info$cell_type)
#factor(sample_info$cell_type)##WRONG?
sample_info$cell_type <- as.factor(sample_info$cell_type)
sample_info$cell_type
#type of the columns needs to be a factor otherwise it gives an error, so converting to factor
#anything that can be grouped and might be important is better to convert it to a factor for future #use
#order(factor(sample_info$cell_type))#this does not seem right
levels(sample_info$cell_type)
factor(sample_info$cell_type, levels=c("CD8", "CD4"), ordered=is.ordered(sample_info$cell_type))# I did based on help arguments
sample_info$cell_type <- relevel(sample_info$cell_type, ref="CD8") #devika
sample_info$cell_type
levels(sample_info$cell_type) #devika
#relevel making CD8 first which will now be reference
#CONVERT EVERY RELEVANT PIECE OF COL INFO INTO FACTOR ESPECIALLY THAT WHICH CAN BE #CATEGORISED/GROUPED?--DID GENOTYPE AND REPLICATE
sample_info$genotype <- as.factor(sample_info$genotype)
sample_info$genotype
levels(sample_info$genotype)
sample_info$replicate <- as.factor(sample_info$replicate)
sample_info$replicate
levels(sample_info$replicate)
#check(colnames (featurecounts_table))== sample_id(sample_info)
identical(colnames(counts_table), rownames(sample_info))#MINE was false because row names were
#numbers-should not use this command, should mention the column you want it to match instead like #below
identical(colnames(counts_table), sample_info$sample_id)
all(colnames(counts_table)) == sample_info$sample_id#DEVIKA
colnames(counts_table) == sample_info$sample_id#DEVIKA
colnames(counts_table)#SEE INDIVIDUALLY
sample_info$sample_id#SEE INDIVIDUALLY
tibble(colnames(counts_table),
sample_info$sample_id)
# rownames(sample_info) not this
#make tibble and see
#correct-done to show me what it does-- sub(".bam", "", colnames(counts_table))
colnames(counts_table) <- sub(".bam", "", colnames(counts_table))
colnames(counts_table) == sample_info$sample_id
#colnames(counts_table) <-  colnames(counts_table) %>%  str_replace(".bam", "")
#
#stringreplace, gsub?  str_replace(".bam", "") #replace with nothing
# option 1: get a vector of pairwise comparisons
# option 2: get a single overall answer whether the two whole vectors are identical
library(DESeq2)
dds <- DESeqDataSetFromMatrix(counts_table,
sample_info,
design=~cell_type
)
#note-error message was to convert it to integer mode, since it is required. Did in next steps
storage.mode(counts_table) <- "integer"
dds <- DESeqDataSetFromMatrix(counts_table,
sample_info,
design=~cell_type
)
#design= needs a "~" before text
storage.mode(counts_table)
dds
class(dds)
typeof(dds)
is(dds, "SummarizedExperiment")
assayNames(dds)
assays(dds)
head(assay(dds, "counts"))
colData(dds)
rowData(dds)
metadata(dds)
dim(dds)
#meta data command tells the version of deseq versio it was used to create it
#can apply functions similar to summarized expt for deseq data too
head(counts(dds))
design(dds)
sizeFactors(dds)
dispersions(dds)
dds[1:5, 1:4]
#dds
#counts(dds)>0---apply rowSums to check this conditions,
#dds[rowSums(counts(dds)>0) >=4,]#condition applied only to rows thats why , col left empty
dds_filtered <- dds[rowSums(counts(dds)>0) >=4,]
dds_filtered
#see in 4 genes as a single condition with >0 expsn
#counts() here is the counts matrix?
#genes here are 19053, dds was 39179
dim(dds)-dim(dds_filtered)#20126 left
keep <- counts(dds) %>%
as.data.frame() %>%
rownames_to_column("gene_id") %>%
as_tibble() %>%
pivot_longer(-gene_id) %>%
left_join(
colData(dds) %>% as_tibble(),
by = c("name" = "sample_id")) %>%
group_by(gene_id, cell_type) %>%
summarise(all_samples = all(value > 0)) %>%
summarise(all_samples_any_celltype = any(all_samples)) %>%
filter(all_samples_any_celltype) %>%
pull(gene_id)
dds[keep, ]
#OMG-I have forgotten everything, got from Kevin's key!
dds_rlog <- rlog( dds_filtered, blind=TRUE)
dds_rlog
class(dds_rlog)
#note- the bonus point making object keep had changed the dds which changed this value. #When I commented that command before this, the values returned to the expected 19053.
dds_vst <- vst(dds_filtered, blind=TRUE )
dds_vst
class(dds_vst)
plotPCA(dds_rlog, intgroup="cell_type", ntop=500 ) +
coord_fixed(ratio = 5)
#plotPCA(dds_vst, intgroup="cell_type", ntop=500 ) +
#   coord_fixed(ratio = 5)
library(pheatmap)
dds_cor <- cor(assay(dds_rlog), method="spearman")
pheatmap(dds_cor, breaks=seq(from = 0.99, to = 1, length.out=100) )
dds_cor <- cor(assay(dds_rlog), method="spearman")
pheatmap(dds_cor)
dds_cor <- cor(assay(dds_vst), method="spearman")
pheatmap(dds_cor )
#note-theirs was different colour with pearson method/vst/rlog/unfiltered
#difference between vst- rlog filtered, and unfiltered
library(RColorBrewer)
dds_dist <- dist(t(assay(dds_rlog)))
#class(dds_dist) -did to see what class it was, then commented it out
blue_colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(as.matrix(dds_dist),
color = blue_colors
)
#note-dd_dist is class distance, make it a matrix using as.matrix in pheatmap because it #requires mat= ie matrix
# first pair of duplicates
identical(
counts(dds_filtered)[, "ERR1755082"],
counts(dds_filtered)[, "ERR1755088" ]
)
# second pair of duplicates
identical(
counts(dds_filtered)[, "ERR1755083"],
counts(dds_filtered)[, "ERR1755089"]
)
#checking if the 2 duplicates identified are same
identical(
counts(dds_filtered)[,"ERR1755088"],
counts(dds_filtered)[,"ERR1755089"])
#colData(dds_filtered)
#so ERR1755082= ERR1755088, ERR1755083= ERR1755089, and ERR1755088 is not ERR1755088
colnames(dds_filtered)
mcols(dds_filtered)
keep <- setdiff(colnames(dds_filtered), c("ERR1755088", "ERR1755089"))
dds_filtered_unique <- dds_filtered[, keep]
dds_filtered_unique
colnames(dds_filtered_unique)
mcols(dds_filtered_unique)
#setdiff removed "ERR1755088" "ERR1755089"
#setdiff s4 generic function
design (dds_filtered_unique)
colData(dds_filtered_unique)
dds_filtered_unique <- DESeq(dds_filtered_unique)
dds_filtered_unique
colData(dds_filtered_unique)
dds_results <- results(dds_filtered_unique )
dds_results
results(dds_filtered_unique, contrast = c("cell_type", "CD4", "CD8"), alpha=0.05)
#default was 0.1, specified alpha to 0.05
summary(dds_results)
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
saveRDS(dds_results, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
dds_results_object<- readRDS("dds_results.csv")
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
#saveRDS(dds_results, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
#dds_results_object<- readRDS("dds_results.csv")
# was supposed to save the dds results as object saveRDS not csv
plotMA(dds_results)
#lfcShrink() use it for analysis, not included in excercise but important
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
#saveRDS(dds_results, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
#dds_results_object<- readRDS("dds_results.csv")
# was supposed to save the dds results as object saveRDS not csv
plotMA(dds_results, alpha =0.05)
lfcShrink(dds_results)# use it for analysis, not included in excercise but important
x <- dds_results %>% as.data.frame() %>% rownames_to_column("gene_id")
#need to assign the column names #for the gene #id rows because it has none
write_csv(x , "/project/ndcn1484/r-week-3/Day 9 last day R/dds_results.csv", col_names=TRUE)
#dds_check_results<- read_csv("dds_results.csv")
#dds_check_results
#saveRDS(dds_results, "/project/ndcn1484/r-week-3/Day 8 R/dds_results.csv")
#dds_results_object<- readRDS("dds_results.csv")
# was supposed to save the dds results as object saveRDS not csv
plotMA(dds_results, alpha =0.05)
#lfcShrink(dds_results)# use it for analysis, not included in excercise but important
