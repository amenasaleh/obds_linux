na.omit(unique(gtf_ACTB$transcript_id))
length (na.omit(unique(gtf_ACTB$transcript_id)))
sum(gtf_ACTB$type == "transcript")
gtf_ACTB_exons <- subset(gtf_ACTB, type == "exon")
gtf_ACTB_transcripts <-
gtf_ACTB_transcripts
gtf_ACTB_exons <- subset(gtf_ACTB, type == "exon")
gtf_ACTB_transcripts <- split(x=gtf_ACTB_exons, f=gtf_ACTB_exons$transcript_id)
gtf_ACTB_transcripts
#keep cursor on word you want help for, then function f1 opens help page
library(org.Hs.eg.db)
org.Hs.eg.db
#| include: true
columns( org.Hs.eg.db  )
keytypes( org.Hs.eg.db  )
human_symbols <- keys(org.Hs.eg.db, "SYMBOL"   )
human_symbols
#you give it the database
human_symbols <- keys(org.Hs.eg.db, "SYMBOL"   )
human_symbols <- head(keys(org.Hs.eg.db, "SYMBOL"),6)
human_symbols
#you give it the database
AnnotationDbi::select( x=org.Hs.eg.db, keys=human_symbols, colums = c("ENTREZID", "ENSEMBL"), keytype ="SYMBOL"  )
AnnotationDbi::select(
x = org.Hs.eg.db,
keys =  human_symbols,
columns = c( "ENTREZID" , "ENSEMBL"),
keytype = "SYMBOL"
)
AnnotationDbi::select(
x = org.Hs.eg.db,
keys =  human_symbols,
columns = c( "ENTREZID" , "ENSEMBL", "GO"),
keytype = "SYMBOL"
)
mapIds( 	x = org.Hs.eg.db,
keys =  human_symbols,
column = c( "ENSEMBL"),
keytype = "SYMBOL"
)
#multivals each gene has multiple values, mapID is more efficient version of select but #maps one identifier only to the other map identifier
columns (GO.db)
columns(GO.db)
library(biomaRt)
listMarts()
listEnsemblArchives()
mart <- useMart("ENSEMBL_MART_ENSEMBL", host = "https://may2021.archive.ensembl.org")
mart
listDatasets(mart) %>% head()
mart <- useMart(
biomart = "ENSEMBL_MART_ENSEMBL",
dataset = "hsapiens_gene_ensembl",
host = "https://may2021.archive.ensembl.org"
)
mart
listAttributes(mart) %>% head()
getBM(
attributes = c("hgnc_symbol", "chromosome_name", "start_position", "end_position", "strand"),
filters = "hgnc_symbol",
values = human_symbols,
mart = mart
)
#like the select function from before
library(EnsDb.Hsapiens.v86)
class(EnsDb.Hsapiens.v86)
columns(EnsDb.Hsapiens.v86)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
class(TxDb.Hsapiens.UCSC.hg38.knownGene)
columns(TxDb.Hsapiens.UCSC.hg38.knownGene)
keytypes(TxDb.Hsapiens.UCSC.hg38.knownGene)
keys(TxDb.Hsapiens.UCSC.hg38.knownGene, "GENEID") %>% head()
#| include: true
#| results: 'hide'
library(SummarizedExperiment)
demo_count_matrix <- matrix(
data = c(1, 2, 3, 4, 5, 6, 7, 8), nrow = 4, ncol = 2,
dimnames = list(
paste0("gene", 1:4),
paste0("sample", 1:2)
))
demo_rowdata <- DataFrame(
symbol = head(letters, 4),
length = c(1234, 5678)
)
demo_coldata <- DataFrame(
condition = c("control", "treated"),
age = c(18, 20)
)
demo_se <- SummarizedExperiment(
assays = list(
counts = demo_count_matrix),
rowData = demo_rowdata,
colData = demo_coldata)
#| include: true
demo_se
assays(demo_se)
assayNames(demo_se)
assay(demo_se, "counts")
colData(demo_se)
rowData(demo_se)
mcols(demo_se)
metadata(demo_se)
assay_counts <- "/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv"
assay_counts <-
head(assay_counts)
assay_counts <- "/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv"
assay_counts <-
head(assay_counts)
assay_counts <- "/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv"
head(assay_counts)
assay_counts <- import ("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv")
assay_counts <- BiocIO::import("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv")
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv")
head(assay_counts)
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv"),
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv"),
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv",
row.names =1)
head(assay_counts)
#assay_counts <- as.matrix(assay_counts)
#because it is a matrix convert it to object
# not BiocIO::import cannot read csv because R and tidyverse does it with read.csv etc
gene_metadata <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/gene_metadata.csv",
row.names =1)
head(gene_metadata)
sample_metadata <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/sample_metadata.csv",
row.names =1)
head(sample_metadata)
demo_se <- SummarizedExperiment(assays =
list(
counts = counts,)
rowData = gene_metadata,
demo_se <- SummarizedExperiment(assays =
list(
counts = counts)
rowData = gene_metadata,
demo_se <- SummarizedExperiment(assays =
list(
counts = counts)
rowData = gene_metadata,
demo_se <- SummarizedExperiment(assays =
list(counts = counts),
rowData = gene_metadata,
colData=sample_metadata
)
demo_se <- SummarizedExperiment(assays = list(counts = counts), rowData = gene_metadata, colData=sample_metadata)
demo_se <- SummarizedExperiment(assays = list(counts = assay_counts), rowData = gene_metadata, colData=sample_metadata)
demo_se
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv",
row.names =1)
assay_counts <- as.matrix(assay_counts)
head(assay_counts)
#because it is a matrix convert it to object
# not BiocIO::import cannot read csv because R and tidyverse does it with read.csv etc
demo_se <- SummarizedExperiment(assays = list(counts = assay_counts), rowData = gene_metadata, colData=sample_metadata)
demo_se
#assigned it to assay-counts because it was getting an error because the same name as function counts
demo_se <- SummarizedExperiment(assays = list(counts = assay_counts), rowData = gene_metadata, colData=sample_metadata)
demo_se
#assays counts from above, 3 pieces of command pooled here, we have an assay counts,
# Demo
## Inheritance and coercion
```{r}
demo_se <- SummarizedExperiment(assays = list(counts = assay_counts), rowData = gene_metadata, colData=sample_metadata)
demo_se
#assays counts from above, 3 pieces of commands pooled here, we have an assay counts matrix, gene info and sample info
demo_dataframe <- data.frame(A = c(1, 2), B = c(3, 4))
demo_dataframe
demo_dataframe <- data.frame(A = c(1, 2), B = c(3, 4))
demo_dataframe
class(demo_dataframe)
#a dataframe is a matrix of rows and columns
demo_DataFrame <- as(demo_dataframe, "DataFrame")
demo_DataFrame
demo_DataFrame <- as(demo_dataframe, "DataFrame")
demo_DataFrame
class(demo_DataFrame)
#this has labelled the rows I guess, assigned row names?
demo_DataFrame <- as(demo_dataframe, "DataFrame")
demo_DataFrame
class(demo_DataFrame)
demo_numeric <- as(demo_dataframe, "numeric")
demo_numeric <- as(demo_dataframe, "numeric")
demo_matrix <- as(demo_dataframe, "matrix")
demo_matrix
class(demo_matrix)
demo_matrix <- as(demo_dataframe, "matrix")
demo_matrix
class(demo_matrix)
demo_DataFrame <- as(demo_dataframe, "DataFrame")
demo_DataFrame
class(demo_DataFrame)
demo_matrix <- as(demo_dataframe, "matrix")
demo_matrix
class(demo_matrix)
#this has used s4 package to convert to dataframe?
# function f1 on the word as above gave this help info   as(object, Class, strict=TRUE, ext)
demo_DataFrame <- as(demo_dataframe, "DataFrame")
demo_DataFrame
class(demo_DataFrame)
#
demo_matrix <- as(demo_dataframe, "matrix")
demo_matrix
class(demo_matrix)
#this has used s4 package to convert to dataframe?
# function f1 on the word as above gave this help info   as(object, Class, strict=TRUE, ext)
library(DESeq2)
demo_deseq <- as(demo_se, "DESeqDataSet"   )
demo_deseq
slotNames( DESeqDataSet  )
demo_se <- SummarizedExperiment(assays = list(counts = assay_counts), rowData = gene_metadata, colData=sample_metadata)
demo_se
#assays counts from above, 3 pieces of commands pooled here, we have an assay counts matrix, gene info and sample info
demo_deseq <- as(demo_se, "DESeqDataSet"   )
demo_deseq
#what are the different classes the as function can be used for--DataFrame, DESeqDataSet, Matrix?
slotNames( DESeqDataSet  )
demo_se <- SummarizedExperiment(assays = list(counts = assay_counts), rowData = gene_metadata, colData=sample_metadata)
demo_se
head(demo_se)
#assays counts from above, 3 pieces of commands pooled here, we have an assay counts matrix, gene info and sample info
demo_se <- SummarizedExperiment(assays = list(counts = assay_counts), rowData = gene_metadata, colData=sample_metadata)
demo_se
#assays counts from above, 3 pieces of commands pooled here, we have an assay counts matrix, gene info and sample info
demo_deseq <- as(demo_se, "DESeqDataSet"   )
demo_deseq
#what are the different classes the as function can be used for--DataFrame, DESeqDataSet, Matrix?
demo_deseq <- as(demo_se, "DESeqDataSet" , row.names=1  )
demo_deseq <- as(demo_se, "DESeqDataSet"), row.names =1
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Biostrings)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38.masked)
library(BiocIO)
library(org.Hs.eg.db)
library(biomaRt)
library(SummarizedExperiment)
library(tximeta)
library(tximportData)
library(DESeq2)
library(SingleCellExperiment)
library(ExperimentHub)
library(iSEE)
library(scuttle)
library(scater)
gtf_data <- BiocIO::import("/project/shared/r/1_r_data_science/8-bioconductor/Homo_sapiens.GRCh38.104.gtf.gz")
gtf_data
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Biostrings)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38.masked)
library(BiocIO)
library(org.Hs.eg.db)
library(biomaRt)
library(SummarizedExperiment)
library(tximeta)
library(tximportData)
library(DESeq2)
library(SingleCellExperiment)
library(ExperimentHub)
library(iSEE)
library(scuttle)
library(scater)
setClass("Person",
representation(
name = "character",
age = "numeric")
)
Person <- function(name, age) {
new("Person", name = name, age = age)
}
kevin <- Person(name = "Kevin", age = 21)
kevin
kevin@age # don't do that
get_age <- function(object) {
object@age
}
get_age(kevin) # do that (if possible)
BiocManager::valid()
library(Biostrings)
DNA_ALPHABET
IlluminaQuality(0:40)
truseq_adapters <- Biostrings::readDNAStringSet("data/TruSeq3-PE-2.fa")
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Biostrings)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38.masked)
library(BiocIO)
library(org.Hs.eg.db)
library(biomaRt)
library(SummarizedExperiment)
library(tximeta)
library(tximportData)
library(DESeq2)
library(SingleCellExperiment)
library(ExperimentHub)
library(iSEE)
library(scuttle)
library(scater)
setClass("Person",
representation(
name = "character",
age = "numeric")
)
Person <- function(name, age) {
new("Person", name = name, age = age)
}
kevin <- Person(name = "Kevin", age = 21)
kevin
kevin@age # don't do that
get_age <- function(object) {
object@age
}
get_age(kevin) # do that (if possible)
BiocManager::valid()
library(Biostrings)
DNA_ALPHABET
IlluminaQuality(0:40)
truseq_adapters <- Biostrings::readDNAStringSet("data/TruSeq3-PE-2.fa")
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Biostrings)
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg38.masked)
library(BiocIO)
library(org.Hs.eg.db)
library(biomaRt)
library(SummarizedExperiment)
library(tximeta)
library(tximportData)
library(DESeq2)
library(SingleCellExperiment)
library(ExperimentHub)
library(iSEE)
library(scuttle)
library(scater)
setClass("Person",
representation(
name = "character",
age = "numeric")
)
Person <- function(name, age) {
new("Person", name = name, age = age)
}
kevin <- Person(name = "Kevin", age = 21)
kevin
kevin@age # don't do that
get_age <- function(object) {
object@age
}
get_age(kevin) # do that (if possible)
BiocManager::valid()
library(Biostrings)
DNA_ALPHABET
IlluminaQuality(0:40)
truseq_adapters <- Biostrings::readDNAStringSet("data/TruSeq3-PE-2.fa")
gene_metadata <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/gene_metadata.csv", row.names = 1)
head(gene_metadata)
sample_metadata <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/sample_metadata.csv", row.names = 1)
head(sample_metadata)
demo_se <- SummarizedExperiment(
assays = list(counts = assay_counts),
colData = sample_metadata,
rowData = gene_metadata
)
demo_se
demo_dataframe <- data.frame(A = c(1, 2), B = c(3, 4))
demo_dataframe
demo_DataFrame <- as(demo_dataframe, "DataFrame")
demo_DataFrame
library(DESeq2)
demo_deseq <- as(demo_se, "DESeqDataSet")
demo_deseq
slotNames(demo_deseq)
demo_DataFrame <- as(demo_dataframe, "DataFrame")
demo_DataFrame
class(demo_DataFrame)
#
demo_matrix <- as(demo_dataframe, "matrix")
demo_matrix
class(demo_matrix)
#this has used s4 package to convert to dataframe?
# function f1 on the word as above gave this help info   as(object, Class, strict=TRUE, ext)
demo_deseq <- as(demo_se, "DESeqDataSet")
demo_deseq
#what are the different classes the as function can be used for--DataFrame, DESeqDataSet, Matrix?
slotNames( DESeqDataSet  )
slotNames( demo_deseq  )
slotNames( SummarizedExperiment  )
slotNames( demo_se  )
unique(slotNames(demo_se , demo_deseq))
gtf_ACTB$transcript_id
gtf_ACTB$transcript_id
unique(gtf_ACTB$transcript_id)
gtf_ACTB$transcript_id
unique(gtf_ACTB$transcript_id)
na.omit(unique(gtf_ACTB$transcript_id))
gtf_ACTB$transcript_id
unique(gtf_ACTB$transcript_id)
na.omit(unique(gtf_ACTB$transcript_id))
length (na.omit(unique(gtf_ACTB$transcript_id)))
unique(gtf_ACTB$transcript_id)
na.omit(unique(gtf_ACTB$transcript_id))
length (na.omit(unique(gtf_ACTB$transcript_id))
length (na.omit(unique(gtf_ACTB$transcript_id)))
sum(gtf_ACTB$type == "transcript")
na.omit(unique(gtf_ACTB$transcript_id))
length (na.omit(unique(gtf_ACTB$transcript_id)))
unique(slotNames(demo_se , demo_deseq))
slotNames(demo_se)
slotNames( demo_se  )
assays(DESeqDataSet)
assays(demo_deseq)
assays(demo_deseq)
assayNames(demo_deseq)
assay(demo_deseq)
colData(demo_deseq)
rowData(demo_deseq)
mcols(demo_deseq)
metadata(demo_deseq)
assays(demo_se)
assayNames(demo_se)
assay(demo_se)
colData(demo_se)
rowData(demo_se)
mcols(demo_se)
metadata(demo_se)
library(SingleCellExperiment)
assays(demo_se)
assayNames(demo_se)
assay(demo_se, "counts")
colData(demo_se)
rowData(demo_se)
mcols(demo_se)
metadata(demo_se)
design(demo_deseq)
dispersionFunction(demo_deseq)
# design(demo_se) # error
# dispersionFunction(demo_se) # error
library(SingleCellExperiment)
demo_sce <- as(  demo_se, "SingleCellExperiment" )
demo_sce <- as(  demo_se, "SingleCellExperiment" )
demo_sce
demo_sce
demo_sce
slotNames(demo_sce)
demo_sce <- as(demo_se, "SingleCellExperiment")
library(SingleCellExperiment)
demo_sce <- as(demo_se, "SingleCellExperiment")
demo_sce
reducedDimNames(demo_sce)
reducedDims(demo_sce)
reducedDim(demo_sce)
reducedDimNames(demo_sce)
reducedDims(demo_sce)
# reducedDim(demo_sce) # error
pca_object <- prcomp(t(assay(demo_sce)))
reducedDim(demo_sce, "PCA") <- pca_object$x
demo_sce
pca_object <- prcomp(t(assay(demo_sce)))
reducedDim(demo_sce, "PCA") <- pca_object$x
demo_sce
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv", row.names =1)
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv", row.names =1)
head(assay_counts)
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv")
head(assay_counts)
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv", row.names =1)
head(assay_counts)
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv")
head(assay_counts)
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv", row.names =1)
head(assay_counts)
assay_counts <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/counts.csv", row.names =1)
assay_counts <- as.matrix(assay_counts)
head(assay_counts)
#because it is a table convert it to matrix and assign to object,  because it needs the counts as a matrix assay
#so in assay I provide it counts
#csv is a table
# not BiocIO::import cannot read csv because R and tidyverse does it with read.csv etc
sample_metadata <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/sample_metadata.csv",
)
head(sample_metadata)
sample_metadata <- read.csv("/project/shared/r/1_r_data_science/8-bioconductor/summarized_experiment/sample_metadata.csv",
row.names =1)
head(sample_metadata)
pca_object <- prcomp(t(assay(demo_sce)))
pca_object
pca_object <- prcomp(t(assay(demo_sce)))
reducedDim(demo_sce, "PCA") <- pca_object$x
demo_sce
pca_object <- prcomp(t(assay(demo_sce)))
pca_object
reducedDim(demo_sce, "PCA") <- pca_object$x
demo_sce
pca_object <- prcomp(t(assay(demo_sce)))
reducedDim(demo_sce, "PCA") <- pca_object$x
demo_sce
#| include: true
library(ExperimentHub)
ehub <- ExperimentHub()
