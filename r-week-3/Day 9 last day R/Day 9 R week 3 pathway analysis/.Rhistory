file.copy("/project/shared/r/1_r_data_science/10-pathways/template.qmd", ".")
options(bitmapType = 'cairo') # For rendering
library(dplyr)
library(tidyverse)
library(gprofiler2)
file.copy("/project/dpag0891/obds-may25/9_de/dds_results.csv", ".")
file.copy("/project/dpag0891/obds-may25/9_de/dds_results.csv", ".")
all_genes_df <- read_csv("dds_results.csv")
View(all_genes_df)
head(dds_results.csv)
head("dds_results.csv")
dim("dds_results.csv")
dim(dds_results.csv)
dim(all_genes_df)
dim(all_genes_df)
head(all_genes_df)
all_genes_df <- read_csv("dds_results.csv") %>% subset(!is.na(padj)
#you can see that there are NA in padj values that you need to filter out use subset
all_genes_df <- read_csv("dds_results.csv") %>% subset(!is.na(padj))
#you can see that there are NA in padj values that you need to filter out use subset
View(all_genes_df)
dim(all_genes_df)
head(all_genes_df)
all_genes_tested_df <-as.data.frame(all_genes_df)
upreg_genes_df <- as.data.frame(all_genes_df) %>% subset("padj"<0.05 & "log2FoldChange">1)
downreg_genes_df <- as.data.frame(all_genes_df) %>% subset("padj"<0.05 & "log2FoldChange">-1)
all_genes_tested_df <-as.data.frame(all_genes_df)
upreg_genes_df <- as.data.frame(all_genes_df) %>% subset(padj<0.05 & log2FoldChange>1)
downreg_genes_df <- as.data.frame(all_genes_df) %>% subset(padj<0.05 & log2FoldChange>-1)
#all_genes_tested_df <-as.data.frame(all_genes_df)
#upreg_genes_df <- as.data.frame(all_genes_df) %>% subset(padj<0.05 & log2FoldChange>1)
#downreg_genes_df <- as.data.frame(all_genes_df) %>% subset(padj<0.05 & log2FoldChange>-1)
all_genes_tested_df <- all_genes_df %>% dplyr::filter(!is.na(padj))
upreg_genes_df <- all_genes_df %>% dplyr::filter(padj<0.05 & log2FoldChange>1)
downreg_genes_df <- all_genes_df %>% dplyr::filter(padj<0.05 & log2FoldChange>-1)
##tidyverse to use with filter with pipe
#do not use quotes with padj col names
dim(all_genes_tested_df)
dim(upreg_genes_df)
dim(downreg_genes_df)
all_genes_df <- read_csv("dds_results.csv")
#all_genes_df <- read_csv("dds_results.csv") %>% subset(!is.na(padj))
dim(all_genes_df)
head(all_genes_df)
#all_genes_df <- read_csv("dds_results.csv") %>% subset(!is.na(padj))
dim(all_genes_df)
head(all_genes_df)
#all_genes_tested_df <-as.data.frame(all_genes_df)
#upreg_genes_df <- as.data.frame(all_genes_df) %>% subset(padj<0.05 & log2FoldChange>1)
#downreg_genes_df <- as.data.frame(all_genes_df) %>% subset(padj<0.05 & log2FoldChange>-1)
all_genes_tested_df <- all_genes_df %>% dplyr::filter(!is.na(padj))
upreg_genes_df <- all_genes_df %>% dplyr::filter(padj<0.05 & log2FoldChange>1)
downreg_genes_df <- all_genes_df %>% dplyr::filter(padj<0.05 & log2FoldChange>-1)
#you can see that there are NA in padj values all_genes_df that you need to filter out
##tidyverse to use with filter with pipe
#do not use quotes with padj col names
#all_genes_df <- read_csv("dds_results.csv") %>% subset(!is.na(padj))
dim(all_genes_df)
class(all_genes_df)
all_gene_tested_ids <- all_genes_tested_df %>% pull (gene_id)
upreg_gene_ids <- upreg_genes_df %>% pull (gene_id)
downreg_gene_ids <- downreg_genes_df %>% pull (gene_id)
View(all_genes_tested_df)
View(upreg_genes_df)
View(upreg_genes_df)
?tidyverse::pull
?gost() # Get help for function
# Write ORA query
gost_results_obj <- upreg_gene_ids, "mmusculus", significant=TRUE
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", significant=TRUE)
head(gost_results_obj$result)
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", significant=TRUE)
head(gost_results_obj)
all_gene_tested_ids <- all_genes_tested_df %>% pull (gene_id)
all_gene_tested_ids
upreg_gene_ids <- upreg_genes_df %>% pull (gene_id)
upreg_gene_ids
downreg_gene_ids <- downreg_genes_df %>% pull (gene_id)
downreg_gene_ids
all_gene_tested_ids <- all_genes_tested_df %>% pull (gene_id)
#all_gene_tested_ids#saw the list of gene ids
upreg_gene_ids <- upreg_genes_df %>% pull (gene_id)
#upreg_gene_ids
downreg_gene_ids <- downreg_genes_df %>% pull (gene_id)
#downreg_gene_ids
#you need a vector of gene symbols for gost below so generated here
#pull from dplyr tidyverse extracts single column from dataframe, tibble AS A VECTOR
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = )
head(gost_results_obj)
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = bonferroni)
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "bonferroni")
head(gost_results_obj)
typeof(gost_results_obj)
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "bonferroni")
head(gost_results_obj)
head(gost_results_obj$result)
#| label: setup
#| include: false
library(tidyverse)
library(DESeq2)
options(width = 120)
design (dds_filtered_unique)
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "bonferroni")
#head(gost_results_obj)
head(gost_results_obj$result)
dim(all_genes_df)
dim(all_genes_tested_df)
dim(upreg_genes_df)
dim(downreg_genes_df)
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "bonferroni")
head(gost_results_obj)
#head(gost_results_obj$result)
gostplot(gost_results_obj, capped = TRUE, interactive = TRUE)
gost_results_obj_link <- gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "bonferroni", as_short_link = TRUE)
gostplot(gost_results_obj, capped = TRUE, interactive = TRUE)
gost_results_obj_link <- gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "bonferroni", as_short_link = TRUE)
gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
gost_results_obj_link <- gost_results_obj <- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "bonferroni", as_short_link = "TRUE")
gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
#gost_results_obj_link <- gost_results_obj
gost_results_obj_link<- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "bonferroni", as_short_link = TRUE)
gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", domain_scope= custom_annotated, custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS")
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS")
head(gost_results_obj)
#head(gost_results_obj$result)
#every gene has equal value, significance does not matter with this plot
#domain scope is the background=custom_annotated gives more info on your genes''read vignettes
typeof(gost_results_obj)
gostplot(gost_results_obj, capped = TRUE, interactive = TRUE)
#<- publish_gostplot()
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS", sources = NULL)
head(gost_results_obj)
#head(gost_results_obj$result)
#every gene has equal value, significance does not matter with this plot
#domain scope is the background=custom_annotated gives more info on your genes''read vignettes
gostplot(gost_results_obj, capped = TRUE, interactive = TRUE)
#<- publish_gostplot()
#gost_results_obj_link <- gost_results_obj
#gost_results_obj_link<- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids #,significant=TRUE, correction_method = "bonferroni", as_short_link = TRUE)
#gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
head(gost_results_obj_link)
#gost_results_obj_link <- gost_results_obj
#gost_results_obj_link<- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids #,significant=TRUE, correction_method = "bonferroni", as_short_link = TRUE)
#gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
head(gost_results_obj_link)
gostplot(gost_results_obj_link)
#gost_results_obj_link <- gost_results_obj
#gost_results_obj_link<- gost(upreg_gene_ids, "mmusculus", custom_bg=all_gene_tested_ids #,significant=TRUE, correction_method = "bonferroni", as_short_link = TRUE)
#gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
head(gost_results_obj_link)
gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
head(gost_results_obj_link)
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
head(gost_results_obj_link)
.tsv <- filter(gost_results_obj >=5 and <=300)
gost_results_filtered.tsv <- filter(gost_results_obj >=5 and <=300)
View(all_genes_tested_df)
View(gost_results_obj)
View(gost_results_obj)
View(gost_results_obj)
View(gost_results_obj[["result"]])
View(gost_results_obj[["result"]])
gost_results_obj_filtered.tsv <- gost_results_obj %>% dplyr::filter( min(5) and max(300))
gost_results_obj_filtered.tsv <- gost_results_obj %>% dplyr::filter( min(5) and max(300))
gost_results_obj_filtered.tsv <- gost_results_obj %>% dplyr::filter( query(min(5) and max(300))
View(gost_results_obj)
gost_results_obj_filtered_df<- gost_results_obj$result
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>% dplyr::filter( term_size >=5 and term_size <=300) %>% arrange(p_value)
gost_results_obj_filtered_df<- gost_results_obj$result
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>% filter( term_size >=5 and term_size <=300) %>% arrange(p_value)
gost_results_obj_filtered_df<- gost_results_obj$result
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>% filter( term_size >=5 & term_size <=300) %>% arrange(p_value)
gost_results_obj_filtered_df<- gost_results_obj$result
#first bring out the nested results list from df  gost_results_obj
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>% filter( term_size >=5 & term_size <=300) %>% arrange(p_value)
#gost_results_obj_filtered_df <- gost(upreg_gene_ids, "mmusculus",
domain_scope= "custom_annotated",
gost_results_obj_filtered_df<- gost_results_obj$result
#first bring out the nested results list from df  gost_results_obj
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>% filter( term_size >=5 & term_size <=300) %>% arrange(p_value)
#gost_results_obj_filtered_df <- gost(upreg_gene_ids, "mmusculus",
domain_scope= "custom_annotated",
tmp <- gost_results_obj
tmp$result <- gost_results_obj_filtered_df
gostplot(tmp, capped = TRUE, interactive = TRUE)
gost_results_obj_filtered_df <- gost(upreg_gene_ids, "mmusculus",
domain_scope= "custom_annotated",
custom_bg=all_gene_tested_ids,
significant=TRUE,
correction_method = "g_SCS",
sources = NULL
)
gostplot(gost_results_obj_filtered_df, capped = TRUE, interactive = TRUE)
query_gene_list <- c(upreg_gene_ids, downreg_gene_ids)
multi_gostquery_results_obj <- gost(query_gene_list,
"mmusculus", multi_query = TRUE,
domain_scope= "custom_annotated",
custom_bg=all_gene_tested_ids,
significant=TRUE,
correction_method = "g_SCS",
sources = NULL)
gostplot(multi_gostquery_results_obj, capped = TRUE, interactive = TRUE)
#NOTE-multiple lists are provided as a named lists of chanracter vectors for multiple queries
#query_gene_list <- c(upreg_gene_ids, downreg_gene_ids)
multi_gostquery_results_obj <- gost(list(upregulated=upreg_gene_ids, downregulated=downreg_gene_ids),
"mmusculus", multi_query = TRUE,
domain_scope= "custom_annotated",
custom_bg=all_gene_tested_ids,
significant=TRUE,
correction_method = "g_SCS",
sources = NULL)
gostplot(multi_gostquery_results_obj, capped = TRUE, interactive = TRUE)
#NOTE-multiple lists are provided as a named lists of chanracter vectors for multiple queries
gostplot(multi_gostquery_results_obj, capped = TRUE, interactive = TRUE)
get_version_info()
library(dplyr)
library(tidyverse)
library(fgsea)
library(msigdbr)
all_genes_df <- read_csv("dds_results.csv")
View(all_genes_df)
View(all_genes_df)
all_genes_tested_df <- all_genes_df
View(all_genes_tested_df)
all_genes_tested_df <- all_genes_df %>% select(gene_id,log2FoldChange)
all_genes_tested_df <- all_genes_df %>% filter::(is.na(padj))
all_genes_tested_df <- all_genes_df %>% dyplr::filter(is.na(padj))
all_genes_tested_df <- all_genes_df %>% dplyr::filter(!is.na(padj))
#note remove na
all_genes_tested_df <- all_genes_tested_df %>% select(gene_id,log2FoldChange)
all_genes_tested_df <- all_genes_tested_df %>% select(gene_id,log2FoldChange)
any(duplicated(all_genes_tested_df$gene_id))
ranks <- deframe(all_genes_tested_df)
plot(ranks)
#
ranks <- sort(ranks, decreasing=TRUE)
plot(ranks)
msigdbr_species()
#go to mseq db website or puse their package mseq dbr
msigdbr_collections()
h_gene_sets <- msigdbr(species="Mus musculus", category="H)
msigdbr_collections()
h_gene_sets <- msigdbr(species="Mus musculus", category="H")
View(h_gene_sets)
class(h_gene_sets)
#| message: false
options(bitmapType = 'cairo') # For rendering
library(tidyverse)
library(gprofiler2)
all_genes_df <- read_csv("dds_results.csv")
dim(all_genes_df)
head(all_genes_df)
all_genes_tested_df <- all_genes_df %>%
dplyr::filter(!is.na(padj))
# P-values set to NA are those from genes with all counts equal to zero (https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#why-are-some-p-values-set-to-na)
upreg_genes_df <- all_genes_tested_df %>%
dplyr::filter(padj < 0.05 & log2FoldChange > 1)
downreg_genes_df <- all_genes_tested_df %>%
dplyr::filter(padj < 0.05 & log2FoldChange < -1)
dim(all_genes_df)
dim(all_genes_tested_df)
dim(upreg_genes_df)
dim(downreg_genes_df)
all_gene_tested_ids <- all_genes_tested_df %>% pull(gene_id)
upreg_gene_ids <- upreg_genes_df %>% pull(gene_id)
downreg_gene_ids <- downreg_genes_df %>% pull(gene_id)
?gost() # Get help for function
# Write ORA query
gost_results_obj <- gost(query = upreg_gene_ids,
organism = "mmusculus",
ordered_query = FALSE,
multi_query = FALSE,
significant = TRUE,
exclude_iea = TRUE,
measure_underrepresentation = FALSE,
evcodes = FALSE,
user_threshold = 0.05,
correction_method = "g_SCS",
domain_scope = "custom_annotated",
custom_bg = all_gene_tested_ids,
numeric_ns = "",
sources = NULL,
as_short_link = FALSE,
highlight = FALSE)
# gost() parameters:
## `ordered_query` - Change to `TRUE` if input gene list is ranked; "testing is then performed iteratively, starting from the first gene and sequentially adding genes one by one" (kolberg_gprofiler2_2020)
## `exclude_iea` - Change to `TRUE` if we want to be stringent with gene sets considered i.e. only look at curated GO gene sets
## measure_underrepresentation - whether overlap is less than expected
## `correction_method = "g_SCS"` - This is their own multiple testing correction; more stringent than Bonferroni or Benjamini-Hochberg, takes into account the unevenly distributed structure of functionally annotated gene sets
## `domain_scope = "custom_annotated"` - "Use the set of genes that are annotated in the data source and are also included in the user provided background list (documentation)"
## `sources` - "We recommend that initial pathway enrichment analyses includes only biological processes (BPs) of GO and molecular pathways of Reactome. Large pathways are of limited interpretative value, whereas numerous small pathways decrease the statistical power because of excessive multiple testing. (doi: 10.1038/s41596-018-0103-9)"
# gost() output coulumns - See gprofiler2 documentation
## query_size - could be different depending on the source of gene sets/pathways because it considers genes annotated in the source
## precision - "the proportion of genes in the input list that are annotated to the function (defined as intersection_size/query_size)"
## recall - "the proportion of functionally annotated genes that the query recovers (defined as intersection_size/term_size)"
## effective_domain_size - Different per source when `domain_scope = "custom_annotated"` as in query_size because not all background genes are annotated in the source
## source_order - "numeric order for the term within its data source (this is important for drawing the results)"; closely related terms are closer to each other in the order
class(gost_results_obj)
summary(gost_results_obj)
gostplot(gost_results_obj, capped = TRUE, interactive = TRUE)
## size of circle - term size
gost_results_obj_link <- gost(query = upreg_gene_ids,
organism = "mmusculus",
ordered_query = FALSE,
multi_query = FALSE,
significant = TRUE,
exclude_iea = TRUE,
measure_underrepresentation = FALSE,
evcodes = FALSE,
user_threshold = 0.05,
correction_method = "g_SCS",
domain_scope = "custom_annotated",
custom_bg = all_gene_tested_ids,
numeric_ns = "",
sources = NULL,
as_short_link = TRUE,
highlight = FALSE)
gost_results_obj_link
# This gives you a url where you can quickly and easily visualise your data and send the link to others to see it too
# Check 'Detailed Results' tab; see g:Profiler docs (https://biit.cs.ut.ee/gprofiler/page/docs) to learn more about the website
gost_results_obj_filtered_df <- gost_results_obj$result
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>%
filter(term_size >= 5 & term_size <= 300) %>%
arrange(p_value)
#
gost_results_obj_filtered <- gost_results_obj
gost_results_obj_filtered$result <- gost_results_obj_filtered_df
gostplot(gost_results_obj_filtered, capped = TRUE, interactive = TRUE)
multi_gostquery_results_obj <- gost(query = list("upreg_genes" = upreg_gene_ids,
"downreg_genes"= downreg_gene_ids),
organism = "mmusculus",
multi_query = FALSE,
exclude_iea = TRUE,
correction_method = "g_SCS",
domain_scope = "custom_annotated",
custom_bg = all_gene_tested_ids)
gostplot(multi_gostquery_results_obj, capped = TRUE, interactive = TRUE)
get_version_info('mmusculus')
library(dplyr)
library(tidyverse)
library(fgsea)
library(msigdbr)
all_genes_df <- read_csv("dds_results.csv")
all_genes_tested_df <- all_genes_df %>%
dplyr::filter(!is.na(padj))
all_genes_tested_df <- all_genes_tested_df %>%
dplyr::select(gene_id,log2FoldChange)
any(duplicated(all_genes_tested_df$gene_id)) # Gene ids are unique so we'll just proceed
ranks <- deframe(all_genes_tested_df)
plot(ranks)
ranks <- sort(ranks, decreasing = TRUE)
plot(ranks)
msigdbr_species()
h_gene_sets <- msigdbr(species = "Mus musculus", # Either scientific or common name is acceptable
category = "H")
# If you want all the gene sets:
# all_gene_sets = msigdbr(species = "mouse")
class(h_gene_sets)
h_gene_sets
h_gene_sets_filtered <- h_gene_sets %>%
filter(ensembl_gene %in% all_genes_tested_df$gene_id)
hallmark_list <- split(x = h_gene_sets_filtered$ensembl_gene,
f = h_gene_sets_filtered$gs_name)
set.seed(190)
fgseaRes <- fgsea(pathways=hallmark_list,
stats=ranks,
maxSize=500)
head(fgseaRes)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
fgseaResTidy
ggplot(fgseaResTidy, aes(NES, reorder(pathway, NES))) +
geom_col(aes(fill = padj < 0.05)) +
labs(x = "Normalized Enrichment Score", y = "",
title = "Hallmark pathways NES from GSEA") +
theme_minimal()
# Use plotEnrichment() to plot GSEA enrichment plot per gene set / pathway
# plotEnrichment(hallmark_list[["HALLMARK_PEROXISOME"]], ranks) +
#   scale_y_continuous(limits = c(-0.2,0.2))
class(h_gene_sets)
h_gene_sets
h_gene_sets_filtered <- h_gene_sets %>%
filter(ensembl_gene %in% all_genes_tested_df$gene_id)
hallmark_list <- split(x = h_gene_sets_filtered$ensembl_gene,
f = h_gene_sets_filtered$gs_name)
set.seed(190)
fgseaRes <- fgsea(pathways=hallmark_list,
stats=ranks,
maxSize=500)
head(fgseaRes)
fgseaResTidy <- fgseaRes %>%
as_tibble() %>%
arrange(desc(NES))
fgseaResTidy
#in r brackets r, height=10
ggplot(fgseaResTidy, aes(NES, reorder(pathway, NES))) +
geom_col(aes(fill = padj < 0.05)) +
labs(x = "Normalized Enrichment Score", y = "",
title = "Hallmark pathways NES from GSEA") +
theme_minimal()
sessionInfo()
#gost_results_obj_link <- gost_results_obj
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
head(gost_results_obj_link)
gostplot(gost_results_obj_link, capped = TRUE, interactive = TRUE)
#gost_results_obj_link <- gost_results_obj
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
#gost_results_obj_link <- gost_results_obj
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
#gost_results_obj_link <- gost_results_obj
gost_results_obj_link <- gost(upreg_gene_ids, "mmusculus", domain_scope= "custom_annotated", custom_bg=all_gene_tested_ids ,significant=TRUE, correction_method = "g_SCS",as_short_link = TRUE)
gost_results_obj_link
#first bring out the nested results list from df  gost_results_obj
gost_results_obj_filtered_df<- gost_results_obj$result
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>% filter( term_size >=5 & term_size <=300) %>% arrange(p_value)
using the original formula
#first bring out the nested results list from df  gost_results_obj
gost_results_obj_filtered_df<- gost_results_obj$result
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>% filter( term_size >=5 & term_size <=300) %>% arrange(p_value)
#using the original formula
gost_results_obj_filtered_df <- gost(upreg_gene_ids, "mmusculus",
domain_scope= "custom_annotated",
custom_bg=all_gene_tested_ids,
significant=TRUE,
correction_method = "g_SCS",
sources = NULL)
gostplot(gost_results_obj_filtered_df, capped = TRUE, interactive = TRUE)
#Devika's method of copying and replacing data in results
tmp <- gost_results_obj
tmp$result <- gost_results_obj_filtered_df
gostplot(tmp, capped = TRUE, interactive = TRUE)
#first bring out the nested results list from df  gost_results_obj
gost_results_obj_filtered_df<- gost_results_obj$result
gost_results_obj_filtered_df <- gost_results_obj_filtered_df %>% filter( term_size >=5 & term_size <=300) %>% arrange(p_value)
#using the original formula
#gost_results_obj_filtered_df <- gost(upreg_gene_ids, "mmusculus",
# domain_scope= "custom_annotated",
# custom_bg=all_gene_tested_ids,
#  significant=TRUE,
#  correction_method = "g_SCS",
#   sources = NULL)
#gostplot(gost_results_obj_filtered_df, capped = TRUE, interactive = TRUE)
#Devika's method of copying and replacing data in results
tmp <- gost_results_obj
tmp$result <- gost_results_obj_filtered_df
gostplot(tmp, capped = TRUE, interactive = TRUE)
#note-copied the filtered data into the gost instead of the unfiltered data to see how it changes
# <-  gost-results-obj is copied to tmp, you add the gost_results_obj filtered-df to the result of tmpto #change the plot.
